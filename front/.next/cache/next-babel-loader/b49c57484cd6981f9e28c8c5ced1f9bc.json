{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  isLoggingIn: false,\n  isLoggedIn: false,\n  isLoggingOut: false,\n  me: null,\n  signUpData: {},\n  loginData: {}\n}; //redux-thunk\n\nexport var loginAction = function loginAction(data) {\n  return function (dispatch, getState) {\n    //initial State인 getState();\n    var state = getState();\n    dispatch(loginRequestAction());\n    axios.post(\"/api/login\").then(function (res) {\n      dispatch(loginSuccessAction(res.data));\n    })[\"catch\"](function (err) {\n      dispatch(loginFailureAction(err));\n    });\n  };\n};\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; ////// LOGIN 액션\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var loginSuccessAction = function loginSuccessAction(data) {\n  return {\n    type: LOG_IN_SUCCESS,\n    data: data\n  };\n};\nexport var loginFailureAction = function loginFailureAction(data) {\n  return {\n    type: LOG_IN_FAILURE,\n    data: data\n  };\n}; ////// LOGOUT 액션\n\nexport var logoutRequestAction = function logoutRequestAction(data) {\n  return {\n    type: LOG_OUT_REQUEST,\n    data: data\n  };\n};\nexport var logoutSuccessAction = function logoutSuccessAction(data) {\n  return {\n    type: LOG_OUT_SUCCESS,\n    data: data\n  };\n};\nexport var logoutFailureAction = function logoutFailureAction(data) {\n  return {\n    type: LOG_OUT_FAILURE,\n    data: data\n  };\n}; // (이전상태, 액션) => 다음상태\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: true\n      });\n\n    case \"LOG_IN_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: \"zerocho\"\n        })\n      });\n\n    case \"LOG_IN_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: false\n      });\n\n    case \"LOG_OUT_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: true\n      });\n\n    case \"LOG_OUT_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case \"LOG_OUT_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/code/Twitter/front/reducers/user.js"],"names":["initialState","isLoggingIn","isLoggedIn","isLoggingOut","me","signUpData","loginData","loginAction","data","dispatch","getState","state","loginRequestAction","axios","post","then","res","loginSuccessAction","err","loginFailureAction","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","type","logoutRequestAction","logoutSuccessAction","logoutFailureAction","action","nickname"],"mappings":"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","sourcesContent":["const initialState = {\r\n  isLoggingIn: false,\r\n  isLoggedIn: false,\r\n  isLoggingOut: false,\r\n  me: null,\r\n  signUpData: {},\r\n  loginData: {},\r\n};\r\n\r\n//redux-thunk\r\nexport const loginAction = (data) => {\r\n  return (dispatch, getState) => {\r\n    //initial State인 getState();\r\n    const state = getState();\r\n    dispatch(loginRequestAction());\r\n    axios\r\n      .post(\"/api/login\")\r\n      .then((res) => {\r\n        dispatch(loginSuccessAction(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginFailureAction(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\n////// LOGIN 액션\r\n\r\nexport const loginRequestAction = (data) => {\r\n  return {\r\n    type: LOG_IN_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const loginSuccessAction = (data) => {\r\n  return {\r\n    type: LOG_IN_SUCCESS,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const loginFailureAction = (data) => {\r\n  return {\r\n    type: LOG_IN_FAILURE,\r\n    data,\r\n  };\r\n};\r\n\r\n////// LOGOUT 액션\r\n\r\nexport const logoutRequestAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutSuccessAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_SUCCESS,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutFailureAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_FAILURE,\r\n    data,\r\n  };\r\n};\r\n\r\n// (이전상태, 액션) => 다음상태\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true,\r\n      };\r\n    case \"LOG_IN_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: true,\r\n        me: { ...action.data, nickname: \"zerocho\" },\r\n      };\r\n    case \"LOG_IN_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: false,\r\n      };\r\n    case \"LOG_OUT_REQUEST\":\r\n      return {\r\n        ...state,\r\n        isLoggingOut: true,\r\n      };\r\n    case \"LOG_OUT_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isLoggedIn: false,\r\n        me: null,\r\n      };\r\n    case \"LOG_OUT_FAILURE\":\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}