{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, put, fork, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","delay","put","fork","takeEvery","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","post","action","type","data","error","response","logOutAPI"],"mappings":";;oDAsBUA,K;qDAsBAC,M;qDAeAC,U;qDASAC,W;qDAOeC,Q;;AA3EzB,SACEC,GADF,EAEEC,KAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,SALF,EAMEC,UANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;;AASA,SAASC,QAAT,GAAoB;AAClB,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,SAAUnB,KAAV,CAAgBoB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMd,KAAK,CAAC,IAAD,CAAX;;AALJ;AAAA;AAMI,iBAAMC,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEP,cADE;AAERQ,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,WAAD,CAAT;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWI,iBAAMf,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAET,cADE;AAERW,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaF;AAFZ,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASG,SAAT,GAAqB;AACnB,SAAOd,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUlB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAII,iBAAMC,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMV,GAAG,CAAC;AACRc,YAAAA,IAAI,EAAEN,eADE;AAERQ,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaF;AAFZ,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUpB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAME,iBAAMO,SAAS,CAACI,cAAD,EAAiBb,KAAjB,CAAf;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIE,iBAAMO,UAAU,CAACM,eAAD,EAAkBf,MAAlB,CAAhB;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACN,UAAD,CAAL,EAAmBM,IAAI,CAACL,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  put,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\r\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\r\n    // const result = yield call(logInAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //while take를 통해 동기적 동작\r\n  // while (true) {\r\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // }\r\n  //takeEvery를 통해 비동기적 동작\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  // while (true) {\r\n  //   yield take(\"LOG_OUT_REQUEST\");\r\n  // }\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}