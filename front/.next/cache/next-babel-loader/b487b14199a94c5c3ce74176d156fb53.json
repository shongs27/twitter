{"ast":null,"code":"import { all, delay, put, fork, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn(action) {\n  try {\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\n    // const result = yield call(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //while take를 통해 동기적 동작\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n  //takeEvery를 통해 비동기적 동작\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  // while (true) {\n  //   yield take(\"LOG_OUT_REQUEST\");\n  // }\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/user.js"],"names":["all","delay","put","fork","takeEvery","takeLatest","axios","logInAPI","post","logIn","action","type","LOG_IN_SUCCESS","data","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","LOG_IN_REQUEST","watchLogOut","LOG_OUT_REQUEST","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,KAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,SALF,EAMEC,UANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACA,UAAMT,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEC,cADE;AAERC,MAAAA,IAAI,EAAEH,MAAM,CAACG;AAFL,KAAD,CAAT;AAID,GATD,CASE,OAAOC,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEI,cADE;AAERC,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASK,SAAT,GAAqB;AACnB,SAAOZ,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUW,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMlB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMC,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAES;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAON,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEU,eADE;AAERL,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaJ;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AACA;AACA,QAAMlB,SAAS,CAACmB,cAAD,EAAiBd,KAAjB,CAAf;AACD;;AAED,UAAUe,WAAV,GAAwB;AACtB;AACA;AACA;AACA,QAAMnB,UAAU,CAACoB,eAAD,EAAkBN,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUO,QAAV,GAAqB;AAClC,QAAM1B,GAAG,CAAC,CAACG,IAAI,CAACmB,UAAD,CAAL,EAAmBnB,IAAI,CAACqB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  put,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\r\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\r\n    // const result = yield call(logInAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //while take를 통해 동기적 동작\r\n  // while (true) {\r\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // }\r\n  //takeEvery를 통해 비동기적 동작\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  // while (true) {\r\n  //   yield take(\"LOG_OUT_REQUEST\");\r\n  // }\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}