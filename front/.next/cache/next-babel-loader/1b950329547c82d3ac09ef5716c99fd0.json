{"ast":null,"code":"import { all, delay, fork, throttle, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\"\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    //원래는 addPostAPI(action.data)의 생김새\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //   yield take(\"ADD_POST_REQUEST\");\n  // }\n  yield takeEvery(ADD_POST_REQUEST, addPost); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/post.js"],"names":["all","delay","fork","throttle","takeEvery","takeLatest","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","addPostAPI","data","post","addPost","action","put","type","err","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,UANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMiB,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,UAAV,CAAqBL,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMiB,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAEP;AADE,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAET,mBADE;AAERI,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,YAAV,GAAyB;AACvB;AACA;AACA;AACA,QAAMnB,SAAS,CAACI,gBAAD,EAAmBQ,OAAnB,CAAf,CAJuB,CAKvB;AACD;;AAED,UAAUQ,eAAV,GAA4B;AAC1B,QAAMnB,UAAU,CAACM,mBAAD,EAAsBW,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMzB,GAAG,CAAC,CAACE,IAAI,CAACqB,YAAD,CAAL,EAAqBrB,IAAI,CAACsB,eAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  fork,\r\n  throttle,\r\n  takeEvery,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n} from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"ADD_POST_SUCCESS\",\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"ADD_POST_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    //원래는 addPostAPI(action.data)의 생김새\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //   yield take(\"ADD_POST_REQUEST\");\r\n  // }\r\n  yield takeEvery(ADD_POST_REQUEST, addPost);\r\n  // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}