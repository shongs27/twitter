{"ast":null,"code":"import { all, delay, fork, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn(action) {\n  try {\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\n    // const result = yield call(logInAPI);\n    console.log(\"왔습니까 혀인ㅁ?\");\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //while take를 통해 동기적 동작\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n  //takeEvery를 통해 비동기적 동작\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  // while (true) {\n  //   yield take(\"LOG_OUT_REQUEST\");\n  // }\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/user.js"],"names":["all","delay","fork","takeEvery","takeLatest","axios","logInAPI","post","logIn","action","console","log","put","type","data","err","response","logOutAPI","logOut","result","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,SAA3B,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMW,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEL,MAAM,CAACK;AAFL,KAAD,CAAT;AAID,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZ,UAAMH,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASG,SAAT,GAAqB;AACnB,SAAOZ,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUW,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMjB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMW,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMH,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AACA;AACA,QAAMjB,SAAS,CAAC,gBAAD,EAAmBK,KAAnB,CAAf;AACD;;AAED,UAAUa,WAAV,GAAwB;AACtB;AACA;AACA;AACA,QAAMjB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMtB,GAAG,CAAC,CAACE,IAAI,CAACkB,UAAD,CAAL,EAAmBlB,IAAI,CAACmB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\r\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\r\n    // const result = yield call(logInAPI);\r\n    console.log(\"왔습니까 혀인ㅁ?\");\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //while take를 통해 동기적 동작\r\n  // while (true) {\r\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // }\r\n  //takeEvery를 통해 비동기적 동작\r\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  // while (true) {\r\n  //   yield take(\"LOG_OUT_REQUEST\");\r\n  // }\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}