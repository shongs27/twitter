{"ast":null,"code":"import shortId from \"shortid\";\nimport produce from \"immer\";\nconst initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫 번째 게시글\",\n    Images: [{\n      src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\"\n    }, {\n      src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\"\n    }, {\n      src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostData: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data: action.data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  //더미데이터 중복되지 않는거 만들기\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  content: \"더미데이터입니다\",\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n}); // (이전상태, 액션) => 다음상태 (불변성 지켜가면서)\n\n\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        //앞에다가 새로운 dummyPost를 추가해야 새게시글이 위로 올라가게 보여줄수 있다\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // const postIndex = state.mainPosts.findIndex(\n          //   (v) => v.id === action.data.postId\n          // );\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/code/Twitter/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","generate","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostData","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","action","addComment","dummyPost","dummyComment","state","draft","unshift","error","removePostDone","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\nimport produce from \"immer\";\r\n\r\nconst initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n      },\r\n      content: \"첫 번째 게시글\",\r\n      Images: [\r\n        {\r\n          src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n        },\r\n        {\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n        },\r\n        {\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요~\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n\r\n          User: {\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요~\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostData: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data: action.data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  //더미데이터 중복되지 않는거 만들기\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  content: \"더미데이터입니다\",\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n});\r\n\r\n// (이전상태, 액션) => 다음상태 (불변성 지켜가면서)\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n\r\n      case ADD_POST_SUCCESS:\r\n        //앞에다가 새로운 dummyPost를 추가해야 새게시글이 위로 올라가게 보여줄수 있다\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n\r\n      case ADD_COMMENT_SUCCESS: {\r\n        // const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}