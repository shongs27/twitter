{"ast":null,"code":"import { all, delay, put, fork, call, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE } from '../reducers/user';\n\nfunction logInAPI() {\n  return axios.post('http://localhost:8080/login');\n}\n\nfunction* logIn(action) {\n  try {\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\n    const result = yield call(logInAPI);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst signUpAPI = data => {\n  return axios.post('http://localhost:8080/user', data);\n};\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    console.log('백엔드', result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //1. while take를 통해 동기적 동작\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n  //2. takeEvery를 통해 비동기적 동작\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/user.js"],"names":["all","delay","put","fork","call","takeEvery","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","logInAPI","post","logIn","action","result","type","data","err","error","response","logOutAPI","logOut","signUpAPI","signUp","console","log","follow","unfollow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  put,\r\n  fork,\r\n  call,\r\n  takeEvery,\r\n  takeLatest,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  FOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI() {\r\n  return axios.post('http://localhost:8080/login');\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\r\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\r\n    const result = yield call(logInAPI);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nconst signUpAPI = (data) => {\r\n  return axios.post('http://localhost:8080/user', data);\r\n};\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log('백엔드', result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //1. while take를 통해 동기적 동작\r\n  // while (true) {\r\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // }\r\n\r\n  //2. takeEvery를 통해 비동기적 동작\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}