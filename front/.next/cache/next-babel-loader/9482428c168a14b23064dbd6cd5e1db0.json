{"ast":null,"code":"import { all, delay, fork, throttle, takeEvery, takeLatest, put } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport axios from 'axios';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    //원래는 addPostAPI(action.data)의 생김새\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  //1\n  //take는 한번만 실행되므로 while로 이벤트리스너처럼 동작\n  //동기적\n  // while (true) {\n  //   yield take(\"ADD_POST_REQUEST\");\n  // }\n  //2\n  //비동기적\n  yield takeEvery(ADD_POST_REQUEST, addPost); // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nfunction* watchRemovePost() {\n  //여러개의 요청으로 여러개의 '응답'중에 마지막꺼만 실행되는 이펙트\n  // 즉 응답이므로, 서버에는 여러개의 요청이 저장될 수 있다\n  //첫번째 응답만 실행하는건 takeLeading\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  // 2초안에 addComment는 한번만 실행 될 수 있다\n  // 요청자체를 한번만 보낼 수 있게 한다\n  yield throttle(1000, ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/post.js"],"names":["all","delay","fork","throttle","takeEvery","takeLatest","put","shortId","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","delete","removePost","REMOVE_POST_OF_ME","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  fork,\r\n  throttle,\r\n  takeEvery,\r\n  takeLatest,\r\n  put,\r\n} from 'redux-saga/effects';\r\nimport shortId from 'shortid';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n} from '../reducers/post';\r\n\r\nimport { ADD_POST_TO_ME } from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    //원래는 addPostAPI(action.data)의 생김새\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  //1\r\n  //take는 한번만 실행되므로 while로 이벤트리스너처럼 동작\r\n  //동기적\r\n  // while (true) {\r\n  //   yield take(\"ADD_POST_REQUEST\");\r\n  // }\r\n\r\n  //2\r\n  //비동기적\r\n  yield takeEvery(ADD_POST_REQUEST, addPost);\r\n  // yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  //여러개의 요청으로 여러개의 '응답'중에 마지막꺼만 실행되는 이펙트\r\n  // 즉 응답이므로, 서버에는 여러개의 요청이 저장될 수 있다\r\n  //첫번째 응답만 실행하는건 takeLeading\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  // 2초안에 addComment는 한번만 실행 될 수 있다\r\n  // 요청자체를 한번만 보낼 수 있게 한다\r\n  yield throttle(1000, ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}