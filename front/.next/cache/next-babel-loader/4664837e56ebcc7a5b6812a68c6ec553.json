{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  logInLoading: false,\n  //로그인 시도중\n  logInDone: false,\n  logInError: null,\n  logOutLoading: false,\n  //로그아웃 시도중\n  logOutDone: false,\n  logOutFailure: null,\n  signUpLoading: false,\n  //가입 시도중\n  signUpDone: false,\n  signUpFailure: null,\n  me: null,\n  signUpData: {},\n  loginData: {}\n}; //redux-thunk\n\nexport const loginAction = data => {\n  return (dispatch, getState) => {\n    //initial State인 getState();\n    const state = getState();\n    dispatch(loginRequestAction());\n    axios.post(\"/api/login\").then(res => {\n      dispatch(loginSuccessAction(res.data));\n    }).catch(err => {\n      dispatch(loginFailureAction(err));\n    });\n  };\n};\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; ////// LOGIN 액션\n\nexport const loginRequestAction = data => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  };\n};\nexport const loginSuccessAction = data => {\n  return {\n    type: LOG_IN_SUCCESS,\n    data\n  };\n};\nexport const loginFailureAction = data => {\n  return {\n    type: LOG_IN_FAILURE,\n    data\n  };\n}; ////// LOGOUT 액션\n\nexport const logoutRequestAction = data => {\n  return {\n    type: LOG_OUT_REQUEST,\n    data\n  };\n};\nexport const logoutSuccessAction = data => {\n  return {\n    type: LOG_OUT_SUCCESS,\n    data\n  };\n};\nexport const logoutFailureAction = data => {\n  return {\n    type: LOG_OUT_FAILURE,\n    data\n  };\n}; // (이전상태, 액션) => 다음상태\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: true,\n        logInError: null,\n        logInDone: false\n      });\n\n    case LOG_IN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInDone: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: \"zerocho\",\n          id: 1,\n          Posts: [],\n          Followings: [],\n          Followers: []\n        })\n      });\n\n    case LOG_IN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        logInLoading: false,\n        logInError: action.error\n      });\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: true\n      });\n\n    case LOG_OUT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case LOG_OUT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/code/Twitter/front/reducers/user.js"],"names":["initialState","logInLoading","logInDone","logInError","logOutLoading","logOutDone","logOutFailure","signUpLoading","signUpDone","signUpFailure","me","signUpData","loginData","loginAction","data","dispatch","getState","state","loginRequestAction","axios","post","then","res","loginSuccessAction","catch","err","loginFailureAction","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","type","logoutRequestAction","logoutSuccessAction","logoutFailureAction","action","nickname","id","Posts","Followings","Followers","error","isLoggingOut","isLoggedIn"],"mappings":"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","sourcesContent":["const initialState = {\r\n  logInLoading: false, //로그인 시도중\r\n  logInDone: false,\r\n  logInError: null,\r\n  logOutLoading: false, //로그아웃 시도중\r\n  logOutDone: false,\r\n  logOutFailure: null,\r\n  signUpLoading: false, //가입 시도중\r\n  signUpDone: false,\r\n  signUpFailure: null,\r\n  me: null,\r\n  signUpData: {},\r\n  loginData: {},\r\n};\r\n\r\n//redux-thunk\r\nexport const loginAction = (data) => {\r\n  return (dispatch, getState) => {\r\n    //initial State인 getState();\r\n    const state = getState();\r\n    dispatch(loginRequestAction());\r\n    axios\r\n      .post(\"/api/login\")\r\n      .then((res) => {\r\n        dispatch(loginSuccessAction(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginFailureAction(err));\r\n      });\r\n  };\r\n};\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\n////// LOGIN 액션\r\n\r\nexport const loginRequestAction = (data) => {\r\n  return {\r\n    type: LOG_IN_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const loginSuccessAction = (data) => {\r\n  return {\r\n    type: LOG_IN_SUCCESS,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const loginFailureAction = (data) => {\r\n  return {\r\n    type: LOG_IN_FAILURE,\r\n    data,\r\n  };\r\n};\r\n\r\n////// LOGOUT 액션\r\n\r\nexport const logoutRequestAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_REQUEST,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutSuccessAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_SUCCESS,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutFailureAction = (data) => {\r\n  return {\r\n    type: LOG_OUT_FAILURE,\r\n    data,\r\n  };\r\n};\r\n\r\n// (이전상태, 액션) => 다음상태\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOG_IN_REQUEST:\r\n      return {\r\n        ...state,\r\n        logInLoading: true,\r\n        logInError: null,\r\n        logInDone: false,\r\n      };\r\n    case LOG_IN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        logInLoading: false,\r\n        logInDone: true,\r\n        me: {\r\n          ...action.data,\r\n          nickname: \"zerocho\",\r\n          id: 1,\r\n          Posts: [],\r\n          Followings: [],\r\n          Followers: [],\r\n        },\r\n      };\r\n    case LOG_IN_FAILURE:\r\n      return {\r\n        ...state,\r\n        logInLoading: false,\r\n        logInError: action.error,\r\n      };\r\n    case LOG_OUT_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: true,\r\n      };\r\n    case LOG_OUT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isLoggedIn: false,\r\n        me: null,\r\n      };\r\n    case LOG_OUT_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}