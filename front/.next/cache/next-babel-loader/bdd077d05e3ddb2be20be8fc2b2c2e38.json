{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nvar initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostData: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts.push(Array(5).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    // Images: [\n    //   {\n    //     src: faker.image.image(),\n    //   },\n    // ],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(commentText, postId, userId) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: {\n      content: commentText,\n      postId: postId,\n      userId: userId\n    }\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    //더미데이터 중복되지 않는거 만들기\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data.content,\n    User: {\n      id: data.userId,\n      nickname: data.userId\n    }\n  };\n}; // (이전상태, 액션) => 다음상태로 만드는게 reducer (불변성 지켜가면서)\n\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        //앞에다가 새로운 dummyPost를 추가해야 새 게시글이 위로 올라가게 보여줄수 있다\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // const postIndex = state.mainPosts.findIndex(\n          //   (v) => v.id === action.data.postId\n          // );\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/code/Twitter/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostData","removePostError","addCommentLoading","addCommentDone","addCommentError","push","Array","fill","map","name","findName","lorem","paragraph","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","commentText","postId","userId","dummyPost","dummyComment","state","action","draft","unshift","error","removePostDone","filter","v","post","find"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nconst initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n      },\r\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            nickname: 'nero',\r\n          },\r\n          content: '우와 개정판이 나왔군요~',\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            nickname: 'hero',\r\n          },\r\n          content: '얼른 사고싶어요~',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostData: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts.push(\r\n  Array(5)\r\n    .fill()\r\n    .map(() => ({\r\n      id: shortId.generate(),\r\n      User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n      },\r\n      content: faker.lorem.paragraph(),\r\n      // Images: [\r\n      //   {\r\n      //     src: faker.image.image(),\r\n      //   },\r\n      // ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n          },\r\n          content: faker.lorem.sentence(),\r\n        },\r\n      ],\r\n    })),\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (commentText, postId, userId) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data: { content: commentText, postId, userId },\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  //더미데이터 중복되지 않는거 만들기\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data.content,\r\n  User: {\r\n    id: data.userId,\r\n    nickname: data.userId,\r\n  },\r\n});\r\n\r\n// (이전상태, 액션) => 다음상태로 만드는게 reducer (불변성 지켜가면서)\r\nexport default (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      case ADD_POST_SUCCESS:\r\n        //앞에다가 새로운 dummyPost를 추가해야 새 게시글이 위로 올라가게 보여줄수 있다\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n        break;\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n\r\n      case ADD_COMMENT_SUCCESS: {\r\n        // const postIndex = state.mainPosts.findIndex(\r\n        //   (v) => v.id === action.data.postId\r\n        // );\r\n        // const post = { ...state.mainPosts[postIndex] };\r\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        // const mainPosts = [...state.mainPosts];\r\n        // mainPosts[postIndex] = post;\r\n        // return {\r\n        //   ...state,\r\n        //   mainPosts,\r\n        //   addCommentLoading: false,\r\n        //   addCommentDone: true,\r\n        // };\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      }\r\n\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}