{"ast":null,"code":"import { all, delay, put, fork, takeEvery, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn(action) {\n  try {\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\n    // const result = yield call(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  //1. while take를 통해 동기적 동작\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n  //2. takeEvery를 통해 비동기적 동작\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/user.js"],"names":["all","delay","put","fork","takeEvery","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","logInAPI","post","logIn","action","type","data","err","error","response","logOutAPI","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,KAFF,EAGEC,GAHF,EAIEC,IAJF,EAKEC,SALF,EAMEC,UANF,QAOO,oBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,GAAoB;AAClB,SAAOV,KAAK,CAACW,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,cADE;AAERY,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GATD,CASE,OAAOC,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEb,cADE;AAERgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASI,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMzB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMC,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOU,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEV,eADE;AAERa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,MAAV,GAAmB;AACjB,MAAI;AACF,UAAM1B,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMC,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEL;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOO,GAAP,EAAY;AACZ,UAAMpB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEN,eADE;AAERS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUO,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AAEA;AACA,QAAMxB,SAAS,CAACI,cAAD,EAAiBU,KAAjB,CAAf;AACD;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACM,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,UAAUI,WAAV,GAAwB;AACtB,QAAM1B,SAAS,CAACS,eAAD,EAAkBc,MAAlB,CAAf;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM/B,GAAG,CAAC,CAACG,IAAI,CAACyB,UAAD,CAAL,EAAmBzB,IAAI,CAAC0B,WAAD,CAAvB,EAAsC1B,IAAI,CAAC2B,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  put,\r\n  fork,\r\n  takeEvery,\r\n  takeLatest,\r\n} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI() {\r\n  return axios.post('/api/login');\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    //fork 비동기실행 (요청보내고 바로 다음꺼 실행) - axios요청과 비슷 - 논블록킹\r\n    //call 동기실행 (기다림) - await와 비슷 - 블록킹\r\n    // const result = yield call(logInAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  //1. while take를 통해 동기적 동작\r\n  // while (true) {\r\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\r\n  // }\r\n\r\n  //2. takeEvery를 통해 비동기적 동작\r\n  yield takeEvery(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}