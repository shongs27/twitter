{"ast":null,"code":"import { all, delay, fork, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //   yield take(\"ADD_POST_REQUEST\");\n  // }\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/code/Twitter/front/sagas/post.js"],"names":["all","delay","fork","takeLatest","axios","addPostAPI","data","post","addPost","action","put","type","result","err","response","watchAddPost","throttle","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,UAA3B,QAA6C,oBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX;AACA,UAAMS,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMH,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUS,YAAV,GAAyB;AACvB;AACA;AACA;AACA,QAAMC,QAAQ,CAAC,kBAAD,EAAqBR,OAArB,EAA8B,IAA9B,CAAd;AACD;;AAED,eAAe,UAAUS,QAAV,GAAqB;AAClC,QAAMjB,GAAG,CAAC,CAACE,IAAI,CAACa,YAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, takeLatest } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"ADD_POST_SUCCESS\",\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"ADD_POST_FAILURE\",\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //   yield take(\"ADD_POST_REQUEST\");\r\n  // }\r\n  yield throttle(\"ADD_POST_REQUEST\", addPost, 2000);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}